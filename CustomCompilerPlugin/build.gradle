plugins {
    id 'java'

    // For using the ballerina java project API
    id 'java-library'

    // Required plugin to create an executable jar which does not require external dependencies
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

group = 'org.wso2.ballerina'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = 'https://repox.jfrog.io/repox/plugins.gradle.org/'
    }

    // Required repository for testing
    maven {
        url = uri("https://plugins.gradle.org/m2/")
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }

    // For Ballerina Plugins
    maven {
        url = 'https://maven.pkg.github.com/ballerina-platform/*'
        credentials {
            username System.getenv("packageUser")
            password System.getenv("packagePAT")
        }
    }
}

dependencies {
    // ===========================
    // For Ballerina Project API's
    // ===========================
    // set the correct gson version
    implementation "com.google.code.gson:gson:${project.gsonVersion}"

    // Required dependencies for accessing the ballerina java project API
    // The version should match the version you have in the local machine
    implementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${project.ballerinaVersion}"
    implementation group: 'org.ballerinalang', name: 'jballerina-tools', version: "${project.ballerinaVersion}"

    // Required dependencies for building a ballerina cli application
    implementation group: 'org.ballerinalang', name: 'ballerina-cli', version: "${project.ballerinaVersion}"

    // Required Module to convert the AST to a JSON File
    implementation group: 'org.ballerinalang', name: 'diagram-util', version: "${project.ballerinaVersion}"

    // Required for determining the platform a java process is running on
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    // Adding dependency to the bal scan tool to retrieve the interface methods
    implementation project(path: ':BridgeCommand')
}

// Setting up the ballerina home property for the project
tasks.withType(JavaExec).configureEach {
    systemProperty 'ballerina.home', System.getenv("BALLERINA_HOME")
}

// ===========================
// JAR creation configurations
// ===========================
// Configurations for the output jar file when the gradle build is performed
// Configure global properties
ext {
    set("buildNumber", System.getProperty("buildNumber"))
}

tasks.jar {
    manifest {
        def displayVersion = (project.property("buildNumber") == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.property("buildNumber")})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-Description': 'Share context between a Ballerina Tool',
                'Plugin-Developers': 'third party developer',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Key': 'ballerina',
                'Plugin-License': 'GNU LGPL 3',
                'Plugin-Name': 'Custom Compiler Plugin',
                'Plugin-Organization': 'third party',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'ballerina',
                'Version': "${project.version}",
                'Jre-Min-Version': '17'
        )
    }
}

// Configuration required to create the shadow jar file
def shadowJar = tasks.shadowJar

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.shadowJar {
    minimize {}

    // build related files, useless for the plugin
    exclude '**/*.js'
    exclude '**/*.properties'
    exclude '**/*.proto'
    exclude '**/*.txt'

    // Other unwanted exclusions
    exclude "cli-help/**"
    exclude "com/**"
    exclude "create_cmd_templates/**"
    exclude "doc-ui/**"
    exclude "io/**"
    exclude "javax/**"
    exclude "kotlin/**"
    exclude "licenses/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/native-image/**"
    exclude "META-INF/native/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/resources/**"
    exclude "META-INF/services/org/**"
    exclude "META-INF/services/com.atomikos.icatch.provider.Assembler"
    exclude "META-INF/services/com.atomikos.icatch.TransactionServicePlugin"
    exclude "META-INF/services/com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory"
    exclude "META-INF/services/io.ballerina.cli.BLauncherCmd"
    exclude "META-INF/services/io.ballerina.cli.launcher.BLauncherCmd"
    exclude "META-INF/services/io.ballerina.runtime.internal.services.spi.EmbeddedExecutor"
    exclude "META-INF/services/javax.annotation.processing.Processor"
    exclude "META-INF/services/javax.xml.stream.XMLEventFactory"
    exclude "META-INF/services/javax.xml.stream.XMLInputFactory"
    exclude "META-INF/services/javax.xml.stream.XMLOutputFactory"
    exclude "META-INF/services/org.ballerinalang.compiler.plugins.CompilerPlugin"
    exclude "META-INF/services/org.codehaus.stax2.validation.XMLValidationSchemaFactory"
    exclude "META-INF/services/org.codehaus.stax2.validation.XMLValidationSchemaFactory.dtd"
    exclude "META-INF/services/org.codehaus.stax2.validation.XMLValidationSchemaFactory.relaxng"
    exclude "META-INF/services/org.codehaus.stax2.validation.XMLValidationSchemaFactory.w3c"
    exclude "META-INF/services/org.testng.xml.ISuiteParser"
    exclude "META-INF/services/reactor.blockhound.integration.BlockHoundIntegration"
    exclude "META-INF/sisu/**"
    exclude "META-INF/versions/**"
    exclude "META-INF/axiom.xml"
    exclude "META-INF/DEPENDENCIES"
    exclude "META-INF/kotlin-stdlib.kotlin_module"
    exclude "META-INF/kotlin-stdlib-common.kotlin_module"
    exclude "META-INF/kotlin-stdlib-jdk7.kotlin_module"
    exclude "META-INF/kotlin-stdlib-jdk8.kotlin_module"
    exclude "META-INF/LICENSE"
    exclude "META-INF/LICENSE.md"
    exclude "META-INF/NOTICE"
    exclude "META-INF/NOTICE.md"
    exclude "META-INF/okio.kotlin_module"
    exclude "META-INF/properties"
    exclude "me/**"
    exclude "new_cmd_defaults/**"
    exclude "okhttp3/**"
    exclude "okio/**"
    exclude "org/apache/**"
    exclude "org/ballerinalang/**"
    exclude "org/codehaus/**"
    exclude "org/eclipse/**"
    exclude "org/jacoco/**"
    exclude "org/jetbrains/**"
    exclude "org/jline/**"
    exclude "org/objectweb/**"
    exclude "org/slf4j/**"
    exclude "org/sonatype/**"
    exclude "org/testng/**"
    exclude "org/wso2/ballerinalang/**"
    exclude "about.html"
    exclude "bal-tools-toml-schema.json"
    exclude "ballerina-toml-schema.json"
    exclude "dependencies-toml-schema.json"
    exclude "jballerina-tools-2201.8.4.zip"
    exclude "old-dependencies-toml-schema.json"
    exclude "plugin.xml"
    exclude "production.html"
    exclude "release-description.md"
    exclude "settings-toml-schema.json"
    exclude "syntax_tree_descriptor.json"
    exclude "template.declaration.mustache"
    exclude "template.execution.mustache"
    exclude "testng.css"
    exclude "testngtasks"
}

artifacts {
    archives shadowJar
}